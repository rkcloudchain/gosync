// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/rkcloudchain/gosync/syncpb/sync.proto

package syncpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChunkChecksums struct {
	ConfigBlockSize      int64            `protobuf:"varint,1,opt,name=config_block_size,json=configBlockSize,proto3" json:"config_block_size,omitempty"`
	Checksums            []*ChunkChecksum `protobuf:"bytes,2,rep,name=checksums,proto3" json:"checksums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ChunkChecksums) Reset()         { *m = ChunkChecksums{} }
func (m *ChunkChecksums) String() string { return proto.CompactTextString(m) }
func (*ChunkChecksums) ProtoMessage()    {}
func (*ChunkChecksums) Descriptor() ([]byte, []int) {
	return fileDescriptor_80ada1672304bdc6, []int{0}
}
func (m *ChunkChecksums) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkChecksums) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkChecksums.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkChecksums) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkChecksums.Merge(m, src)
}
func (m *ChunkChecksums) XXX_Size() int {
	return m.Size()
}
func (m *ChunkChecksums) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkChecksums.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkChecksums proto.InternalMessageInfo

type ChunkChecksum struct {
	BlockIndex           uint32   `protobuf:"varint,1,opt,name=block_index,json=blockIndex,proto3" json:"block_index,omitempty"`
	WeakHash             uint32   `protobuf:"varint,2,opt,name=weak_hash,json=weakHash,proto3" json:"weak_hash,omitempty"`
	StrongHash           []byte   `protobuf:"bytes,3,opt,name=strong_hash,json=strongHash,proto3" json:"strong_hash,omitempty"`
	BlockSize            int64    `protobuf:"varint,4,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkChecksum) Reset()         { *m = ChunkChecksum{} }
func (m *ChunkChecksum) String() string { return proto.CompactTextString(m) }
func (*ChunkChecksum) ProtoMessage()    {}
func (*ChunkChecksum) Descriptor() ([]byte, []int) {
	return fileDescriptor_80ada1672304bdc6, []int{1}
}
func (m *ChunkChecksum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkChecksum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkChecksum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkChecksum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkChecksum.Merge(m, src)
}
func (m *ChunkChecksum) XXX_Size() int {
	return m.Size()
}
func (m *ChunkChecksum) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkChecksum.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkChecksum proto.InternalMessageInfo

type PatcherBlockSpan struct {
	Found                []*FoundBlockSpan   `protobuf:"bytes,1,rep,name=found,proto3" json:"found,omitempty"`
	Missing              []*MissingBlockSpan `protobuf:"bytes,2,rep,name=missing,proto3" json:"missing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PatcherBlockSpan) Reset()         { *m = PatcherBlockSpan{} }
func (m *PatcherBlockSpan) String() string { return proto.CompactTextString(m) }
func (*PatcherBlockSpan) ProtoMessage()    {}
func (*PatcherBlockSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_80ada1672304bdc6, []int{2}
}
func (m *PatcherBlockSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatcherBlockSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PatcherBlockSpan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PatcherBlockSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatcherBlockSpan.Merge(m, src)
}
func (m *PatcherBlockSpan) XXX_Size() int {
	return m.Size()
}
func (m *PatcherBlockSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_PatcherBlockSpan.DiscardUnknown(m)
}

var xxx_messageInfo_PatcherBlockSpan proto.InternalMessageInfo

type FoundBlockSpan struct {
	ComparisonOffset     int64    `protobuf:"varint,1,opt,name=comparison_offset,json=comparisonOffset,proto3" json:"comparison_offset,omitempty"`
	StartIndex           uint32   `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	EndIndex             uint32   `protobuf:"varint,3,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
	BlockSize            int64    `protobuf:"varint,4,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FoundBlockSpan) Reset()         { *m = FoundBlockSpan{} }
func (m *FoundBlockSpan) String() string { return proto.CompactTextString(m) }
func (*FoundBlockSpan) ProtoMessage()    {}
func (*FoundBlockSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_80ada1672304bdc6, []int{3}
}
func (m *FoundBlockSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FoundBlockSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FoundBlockSpan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FoundBlockSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FoundBlockSpan.Merge(m, src)
}
func (m *FoundBlockSpan) XXX_Size() int {
	return m.Size()
}
func (m *FoundBlockSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_FoundBlockSpan.DiscardUnknown(m)
}

var xxx_messageInfo_FoundBlockSpan proto.InternalMessageInfo

type MissingBlockSpan struct {
	StartOffset          int64    `protobuf:"varint,1,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset            int64    `protobuf:"varint,2,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MissingBlockSpan) Reset()         { *m = MissingBlockSpan{} }
func (m *MissingBlockSpan) String() string { return proto.CompactTextString(m) }
func (*MissingBlockSpan) ProtoMessage()    {}
func (*MissingBlockSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_80ada1672304bdc6, []int{4}
}
func (m *MissingBlockSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissingBlockSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissingBlockSpan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissingBlockSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissingBlockSpan.Merge(m, src)
}
func (m *MissingBlockSpan) XXX_Size() int {
	return m.Size()
}
func (m *MissingBlockSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_MissingBlockSpan.DiscardUnknown(m)
}

var xxx_messageInfo_MissingBlockSpan proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ChunkChecksums)(nil), "syncpb.ChunkChecksums")
	proto.RegisterType((*ChunkChecksum)(nil), "syncpb.ChunkChecksum")
	proto.RegisterType((*PatcherBlockSpan)(nil), "syncpb.PatcherBlockSpan")
	proto.RegisterType((*FoundBlockSpan)(nil), "syncpb.FoundBlockSpan")
	proto.RegisterType((*MissingBlockSpan)(nil), "syncpb.MissingBlockSpan")
}

func init() {
	proto.RegisterFile("github.com/rkcloudchain/gosync/syncpb/sync.proto", fileDescriptor_80ada1672304bdc6)
}

var fileDescriptor_80ada1672304bdc6 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x8e, 0xd3, 0x30,
	0x14, 0x85, 0xeb, 0x16, 0x06, 0x7a, 0xe7, 0x87, 0x62, 0x01, 0x8a, 0x40, 0x13, 0x4a, 0x25, 0xa4,
	0x0a, 0x50, 0x8b, 0x66, 0x1e, 0x00, 0x69, 0x46, 0x42, 0xb0, 0x40, 0xa0, 0xc0, 0x8a, 0x4d, 0xe5,
	0x38, 0x4e, 0x6c, 0x65, 0x62, 0x87, 0x38, 0x11, 0x30, 0xef, 0xc0, 0x1e, 0xf1, 0x44, 0xb3, 0x9c,
	0x47, 0x60, 0xca, 0x8b, 0x20, 0xfb, 0x26, 0x2d, 0x61, 0x03, 0x9b, 0x36, 0xfa, 0xce, 0xb1, 0xef,
	0x3d, 0x47, 0x86, 0xe7, 0x99, 0xaa, 0x65, 0x13, 0x2f, 0xb8, 0x29, 0x96, 0x55, 0xce, 0xcf, 0x4c,
	0x93, 0x70, 0xc9, 0x94, 0x5e, 0x66, 0xc6, 0x7e, 0xd5, 0x7c, 0xe9, 0x7e, 0xca, 0xd8, 0xff, 0x2d,
	0xca, 0xca, 0xd4, 0x86, 0xee, 0x20, 0xba, 0x7f, 0x27, 0x33, 0x99, 0xf1, 0x68, 0xe9, 0xbe, 0x50,
	0x9d, 0x7d, 0x82, 0x83, 0x53, 0xd9, 0xe8, 0xfc, 0x54, 0x0a, 0x9e, 0xdb, 0xa6, 0xb0, 0xf4, 0x09,
	0xdc, 0xe6, 0x46, 0xa7, 0x2a, 0x5b, 0xc5, 0x67, 0x86, 0xe7, 0x2b, 0xab, 0xce, 0x45, 0x40, 0xa6,
	0x64, 0x3e, 0x8a, 0x6e, 0xa1, 0x70, 0xe2, 0xf8, 0x7b, 0x75, 0x2e, 0xe8, 0x31, 0x8c, 0x79, 0x77,
	0x30, 0x18, 0x4e, 0x47, 0xf3, 0xdd, 0xa3, 0xbb, 0x0b, 0x9c, 0xb7, 0xe8, 0x5d, 0x1b, 0x6d, 0x7d,
	0xb3, 0x6f, 0x04, 0xf6, 0x7b, 0x22, 0x7d, 0x08, 0xbb, 0x38, 0x4b, 0xe9, 0x44, 0x7c, 0xf1, 0xc3,
	0xf6, 0x23, 0xf0, 0xe8, 0xb5, 0x23, 0xf4, 0x01, 0x8c, 0x3f, 0x0b, 0x96, 0xaf, 0x24, 0xb3, 0x32,
	0x18, 0x7a, 0xf9, 0xa6, 0x03, 0xaf, 0x98, 0x95, 0xee, 0xb4, 0xad, 0x2b, 0xa3, 0x33, 0x94, 0x47,
	0x53, 0x32, 0xdf, 0x8b, 0x00, 0x91, 0x37, 0x1c, 0x02, 0xfc, 0x11, 0xe5, 0x9a, 0x8f, 0x32, 0x8e,
	0xbb, 0x10, 0xb3, 0x1a, 0x26, 0xef, 0x58, 0xcd, 0xa5, 0xa8, 0x30, 0x58, 0xc9, 0x34, 0x7d, 0x06,
	0xd7, 0x53, 0xd3, 0xe8, 0x24, 0x20, 0x3e, 0xd4, 0xbd, 0x2e, 0xd4, 0x4b, 0x07, 0x37, 0xb6, 0x08,
	0x4d, 0xf4, 0x08, 0x6e, 0x14, 0xca, 0x5a, 0xa5, 0xb3, 0xb6, 0x84, 0xa0, 0xf3, 0xbf, 0x41, 0xbc,
	0x3d, 0xd1, 0x19, 0x67, 0x3f, 0x08, 0x1c, 0xf4, 0x6f, 0xa3, 0x4f, 0x5d, 0xf3, 0x45, 0xc9, 0x2a,
	0x65, 0x8d, 0x5e, 0x99, 0x34, 0xb5, 0xa2, 0x6e, 0x9b, 0x9f, 0x6c, 0x85, 0xb7, 0x9e, 0x63, 0x6a,
	0x56, 0xd5, 0x6d, 0x67, 0x58, 0x0a, 0x78, 0xb4, 0xe9, 0x4c, 0xe8, 0xa4, 0x95, 0x47, 0xd8, 0x99,
	0xd0, 0x09, 0x8a, 0xff, 0xa8, 0xe4, 0x03, 0x4c, 0xfe, 0xde, 0x9c, 0x3e, 0x82, 0x3d, 0x1c, 0xd8,
	0x5b, 0x0c, 0x97, 0x68, 0x77, 0x3a, 0x04, 0x70, 0x23, 0x5b, 0xc3, 0x10, 0x6f, 0x15, 0x3a, 0x41,
	0xf9, 0xe4, 0xc5, 0xc5, 0x55, 0x38, 0xb8, 0xbc, 0x0a, 0x07, 0x17, 0xeb, 0x90, 0x5c, 0xae, 0x43,
	0xf2, 0x73, 0x1d, 0x92, 0xef, 0xbf, 0xc2, 0xc1, 0xc7, 0xc7, 0xff, 0xf5, 0xaa, 0xe3, 0x1d, 0xff,
	0x66, 0x8f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x3a, 0xbb, 0xbb, 0x05, 0x03, 0x00, 0x00,
}

func (m *ChunkChecksums) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkChecksums) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConfigBlockSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.ConfigBlockSize))
	}
	if len(m.Checksums) > 0 {
		for _, msg := range m.Checksums {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSync(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChunkChecksum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkChecksum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BlockIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.BlockIndex))
	}
	if m.WeakHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.WeakHash))
	}
	if len(m.StrongHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.StrongHash)))
		i += copy(dAtA[i:], m.StrongHash)
	}
	if m.BlockSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.BlockSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PatcherBlockSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatcherBlockSpan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Found) > 0 {
		for _, msg := range m.Found {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSync(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Missing) > 0 {
		for _, msg := range m.Missing {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSync(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FoundBlockSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FoundBlockSpan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ComparisonOffset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.ComparisonOffset))
	}
	if m.StartIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.StartIndex))
	}
	if m.EndIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.EndIndex))
	}
	if m.BlockSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.BlockSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MissingBlockSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissingBlockSpan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartOffset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.StartOffset))
	}
	if m.EndOffset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.EndOffset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSync(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChunkChecksums) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigBlockSize != 0 {
		n += 1 + sovSync(uint64(m.ConfigBlockSize))
	}
	if len(m.Checksums) > 0 {
		for _, e := range m.Checksums {
			l = e.Size()
			n += 1 + l + sovSync(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChunkChecksum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockIndex != 0 {
		n += 1 + sovSync(uint64(m.BlockIndex))
	}
	if m.WeakHash != 0 {
		n += 1 + sovSync(uint64(m.WeakHash))
	}
	l = len(m.StrongHash)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.BlockSize != 0 {
		n += 1 + sovSync(uint64(m.BlockSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PatcherBlockSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Found) > 0 {
		for _, e := range m.Found {
			l = e.Size()
			n += 1 + l + sovSync(uint64(l))
		}
	}
	if len(m.Missing) > 0 {
		for _, e := range m.Missing {
			l = e.Size()
			n += 1 + l + sovSync(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FoundBlockSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ComparisonOffset != 0 {
		n += 1 + sovSync(uint64(m.ComparisonOffset))
	}
	if m.StartIndex != 0 {
		n += 1 + sovSync(uint64(m.StartIndex))
	}
	if m.EndIndex != 0 {
		n += 1 + sovSync(uint64(m.EndIndex))
	}
	if m.BlockSize != 0 {
		n += 1 + sovSync(uint64(m.BlockSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MissingBlockSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartOffset != 0 {
		n += 1 + sovSync(uint64(m.StartOffset))
	}
	if m.EndOffset != 0 {
		n += 1 + sovSync(uint64(m.EndOffset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSync(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSync(x uint64) (n int) {
	return sovSync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChunkChecksums) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkChecksums: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkChecksums: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigBlockSize", wireType)
			}
			m.ConfigBlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigBlockSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksums = append(m.Checksums, &ChunkChecksum{})
			if err := m.Checksums[len(m.Checksums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkChecksum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkChecksum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkChecksum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockIndex", wireType)
			}
			m.BlockIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeakHash", wireType)
			}
			m.WeakHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeakHash |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrongHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrongHash = append(m.StrongHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StrongHash == nil {
				m.StrongHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatcherBlockSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatcherBlockSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatcherBlockSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Found = append(m.Found, &FoundBlockSpan{})
			if err := m.Found[len(m.Found)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Missing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Missing = append(m.Missing, &MissingBlockSpan{})
			if err := m.Missing[len(m.Missing)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FoundBlockSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FoundBlockSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FoundBlockSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComparisonOffset", wireType)
			}
			m.ComparisonOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComparisonOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndIndex", wireType)
			}
			m.EndIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissingBlockSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissingBlockSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissingBlockSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartOffset", wireType)
			}
			m.StartOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOffset", wireType)
			}
			m.EndOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSync
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSync
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSync
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSync(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSync
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSync = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSync   = fmt.Errorf("proto: integer overflow")
)
